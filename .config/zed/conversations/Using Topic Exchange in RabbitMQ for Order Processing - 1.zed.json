{"id":"d0fa088a-b856-46f0-872b-f06e489eaae3","zed":"context","version":"0.4.0","text":"\n\n\n\n```js restaurant_w_order/client/index.js:37-54\n// Excerpt from: \nif (error0) {\n      throw error0;\n    }\n    connection.createChannel(function (error1, channel) {\n      if (error1) {\n        throw error1;\n      }\n      var queue = \"order_queue\";\n      //var msg = process.argv.slice(2).join(' ') || \"Hello World!\";\n\n      channel.assertQueue(queue, {\n        durable: true,\n      });\n      channel.sendToQueue(queue, Buffer.from(JSON.stringify(orderItem)), {\n        persistent: true,\n      });\n      console.log(\" [x] Sent '%s'\", orderItem);\n    });\n```\nuse topic exchange type\n\n\nTo use a topic exchange type in RabbitMQ, you need to declare a topic exchange and bind a queue to it. Here's how you can modify your code to use a topic exchange:\n\n1. Declare a topic exchange.\n2. Bind the queue to the topic exchange with a routing key.\n3. Publish the message to the topic exchange with the appropriate routing key.\n\nHere's the updated code:\n\n```js\nif (error0) {\n  throw error0;\n}\nconnection.createChannel(function (error1, channel) {\n  if (error1) {\n    throw error1;\n  }\n\n  var exchange = \"order_exchange\";\n  var queue = \"order_queue\";\n  var routingKey = \"order.created\"; // You can change this to any routing key pattern you need\n\n  // Declare a topic exchange\n  channel.assertExchange(exchange, \"topic\", {\n    durable: true,\n  });\n\n  // Declare a queue\n  channel.assertQueue(queue, {\n    durable: true,\n  });\n\n  // Bind the queue to the exchange with the routing key\n  channel.bindQueue(queue, exchange, routingKey);\n\n  // Publish the message to the exchange with the routing key\n  channel.publish(exchange, routingKey, Buffer.from(JSON.stringify(orderItem)), {\n    persistent: true,\n  });\n\n  console.log(\" [x] Sent '%s'\", orderItem);\n});\n```\n\nIn this code:\n\n- `channel.assertExchange(exchange, \"topic\", { durable: true })` declares a topic exchange named `order_exchange`.\n- `channel.assertQueue(queue, { durable: true })` declares a queue named `order_queue`.\n- `channel.bindQueue(queue, exchange, routingKey)` binds the queue to the exchange with the specified routing key (`order.created` in this case).\n- `channel.publish(exchange, routingKey, Buffer.from(JSON.stringify(orderItem)), { persistent: true })` publishes the message to the exchange with the routing key.\n\nYou can adjust the `routingKey` to match the pattern you need for your application.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":27}},"image_offsets":[]},{"id":{"replica_id":0,"value":18},"start":585,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":28}},"image_offsets":[]},{"id":{"replica_id":0,"value":19},"start":2363,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":29}},"image_offsets":[]}],"summary":"Using Topic Exchange in RabbitMQ for Order Processing","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default"}]}