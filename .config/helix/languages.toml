# [language-server.gopls]
# config = { gofumpt = true, local = "goimports", semanticTokens = true, staticcheck = true, verboseOutput = true, analyses = { fieldalignment = true, nilness = true, unusedparams = true, unusedwrite = true, useany = true }, usePlaceholders = true, completeUnimported = true, hints = { assignVariableType = true, compositeLiteralFields = true, compositeLiteralTypes = true, constantValues = true, functionTypeParameters = true, parameterNames = true, rangeVariableTypes = true }}

# introduce new language server
[language-server.scls]
command = "simple-completion-language-server"

[language-server.scls.config]
max_completion_items = 100           # set max completion results len for each group: words, snippets, unicode-input
snippets_first = true                # completions will return before snippets by default
snippets_inline_by_word_tail = false # suggest snippets by WORD tail, for example text `xsq|` become `x^2|` when snippet `sq` has body `^2`
feature_words = true                 # enable completion by word
feature_snippets = true              # enable snippets
feature_unicode_input = true         # enable "unicode input"
feature_paths = true                 # enable path completion
feature_citations = false            # enable citation completion (only on `citation` feature enabled)


# write logs to /tmp/completion.log
[language-server.scls.environment]
RUST_LOG = "info,simple-completion-language-server=info"
LOG_FILE = "/tmp/completion.log"

[[language]]
name = "go"
auto-format = true
language-servers = [ "scls", "gopls" ]
formatter = { command = "goimports" }

[[language]]
name = "ocaml"
auto-format = true
formatter = { command = "ocamlformat", args = [
  "-",
  "--impl",
  # "--enable-outside-detected-project", # Enable only if you want to format files outside of projects
] }

[[language]]
name = "typescript"
language-servers = ["typescript-language-server", "vscode-eslint-language-server"]
